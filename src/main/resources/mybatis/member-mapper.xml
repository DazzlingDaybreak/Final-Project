<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">
	
	<!-- member로그인-->
	<select id="isLoginAllowed" resultType="int">
		select count(*) 
		  from member 
		 where id = #{id}
		   and pw = #{pw}
	</select>
	
	<!-- ID 중복체크 -->
	<select id="isIDExist" resultType="kh.spring.dto.MemberDTO">
		select *
   	  	  from member
         where id= #{id}
	</select>
	<!-- 닉네임 중복체크 -->
	<select id="isNICExist" resultType="kh.spring.dto.MemberDTO">
		select *
       	  from member
       	 where nickname = #{nickname}
		   and nvl(kakaologin,'N') = 'N'
	</select>
		<!-- 이메일 중복체크 -->
	<select id="isEMAILExist" resultType="kh.spring.dto.MemberDTO">
		select *
		  from member
		 where email = #{email}
		   and nvl(kakaologin,'N') = 'N'
	</select>
	
	<!-- 회원가입  -->
	<insert id="insertMember" parameterType="kh.spring.dto.MemberDTO">
		INSERT INTO member (
			seq
		    , id
		    , pw
		    , name
		    , nickname
		    , phone
		    , email
		    , bank
		    , account
		    , money
		    , grade
		    , blacklist
		    , kakaologin
		    , zipcode
		    , address1
		    , address2
		    , signup_Date
		) VALUES (
			 member_seq.nextval
			, #{id          , jdbcType=VARCHAR}
			, #{pw          , jdbcType=VARCHAR}
			, #{name        , jdbcType=VARCHAR}
			, #{nickname    , jdbcType=VARCHAR}
			, #{phone       , jdbcType=VARCHAR}
			, #{email       , jdbcType=VARCHAR}
			, #{bank        , jdbcType=VARCHAR}
			, #{account     , jdbcType=VARCHAR}
			, #{money       , jdbcType=INTEGER}
			, 'bronze'
			, #{blacklist   , jdbcType=VARCHAR}
			, #{kakaologin  , jdbcType=VARCHAR}
			, #{zipcode     , jdbcType=VARCHAR}
			, #{address1    , jdbcType=VARCHAR}
			, #{address2    , jdbcType=VARCHAR}
			, sysdate
		)
		<selectKey resultType="int" order="AFTER"
			keyProperty="seq">
			select member_seq.currval from dual
		</selectKey>
	</insert>
		<!-- 카카오 회원가입 -->
	<insert id="kakaoInsert" parameterType="kh.spring.dto.MemberDTO">
	INSERT INTO member(
			  seq
			, id
		    , nickname
		    , email
		  	, kakaologin
		    , signup_Date
		    , grade
		) VALUES (
			  member_seq.nextval
			, #{email    , jdbcType=VARCHAR}
			, #{nickname , jdbcType=VARCHAR}
			, #{email	 , jdbcType=VARCHAR}
			, 'Y'
			, sysdate
			, 'bronze'
	)
	</insert>
	
	<!-- 아이디 찾기 -->
	<select id="searchId" resultType="kh.spring.dto.MemberDTO">
		select * from member 
         where email = #{email}
		   and nvl(kakaologin,'N') = 'N'
	</select>

		<!-- 임시비밀번호 저장 -->
	<update id="updateTempPassword" parameterType="kh.spring.dto.MemberDTO">
		UPDATE member
		   set pw = #{pw          , jdbcType=VARCHAR}
		 where id = #{id          , jdbcType=VARCHAR}
	</update>

	<!-- 관리자 페이지 챌린지 관리에서 챌린지 등록시 이미지 업로드 -->
	<insert id="insertMemberImg">
		INSERT INTO profile (
		    seq,
		    parentseq,
		    oriname,
		    sysname
		) VALUES (
		    profile_seq.nextval,
		    #{seq       	  , jdbcType=INTEGER},
		    #{oriName         , jdbcType=VARCHAR},
		    #{sysName         , jdbcType=VARCHAR}
		)
	</insert>

   
   
</mapper>